
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: web_docker_sample-frontend-1
    ports:
      - "80:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - app-network
      - dbnetwork
    restart: unless-stopped
    environment:
      - PORT=3000
      - API_URL=http://backend:3000

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: web_docker_sample-backend-1
    ports:
      - "3000:3000"
      - "8080: 8080"
    
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=mydatabase
      - DB_USER=dbuser
      - DB_PASSWORD=dbpassword
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
      - dbnetwork
    restart: unless-stopped

  db:
    image: mariadb:10.6
    volumes:
      - mariadb_data:/var/lib/mysql
    container_name: web_docker_sample-db-1
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=mydatabase
      - MYSQL_USER=dbuser
      - MYSQL_PASSWORD=dbpassword
    ports:
      - "3306:3306"
    networks:
      - app-network
      - dbnetwork
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  app-network:
    driver: bridge
  dbnetwork:
    external: true

volumes:
  mariadb_data:
  backend_node_modules:
  frontend_node_modules: